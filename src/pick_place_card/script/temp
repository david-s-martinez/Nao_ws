    def move_yaxis(self, rvec, tvec, desired_rmat, desired_tmat, desired_pose):
        try:

            aruco_params = cv2.aruco.DetectorParameters_create()

            # Create a ROS2 node and a Stretch robot object
            self.postureProxy.goToPosture("StandInit", 1)

            # Define the desired pose of the marker with respect to the camera frame
            # You can use the data of the specific position that you have
            desired_pose = ...

            # Define the error threshold and the control gains
            error_threshold = 0.1
            kp = 0.1
            ki = 0.01
            kd = 0.01

            # Initialize the error and the integral terms
            error = np.inf
            integral = 0

            # Assuming rvec and tvec are your rotation vector and translation vector
            rmat, _ = cv2.Rodrigues(rvec)
            tmat = np.array(tvec).reshape((3, 1))

            current_pose = np.hstack((rmat, tmat))

            # Calculate PID control output
            error = desired_pose - current_pose
            integral += error
            # derivative = error - previous_error

            # Calculate control command
            control_command = kp * error + ki * integral

            x = control_command[0, 3]
            y = control_command[1, 3]

            # Get the rotation value from the 3x3 submatrix of the error matrix
            rotation_matrix = control_command[:3, :3]
            rotation_vector, _ = cv2.Rodrigues(rotation_matrix)
            theta = np.linalg.norm(rotation_vector)

            self.nao_walk(x , y , theta)

            # Update previous error for the next iteration
            # previous_error = error

            # Loop until the error is below the threshold
            if np.linalg.norm(error) > error_threshold:

                return False
            
            else:
                self.postureProxy.goToPosture("StandInit", 1)   
                # Print a message when the alignment is done
                print("Alignment completed")

                return True
        
        except Exception as e:
            print(e)
            print("Move to Target failed")
            return False
